version: 2.1

parameters:
  cloud_job_parameter:
    type: string
    default: "default_job_parameter"
  cloud_workflow_parameter:
    type: boolean
    default: false

jobs: 
  build: 
    docker: 
      - image: cimg/go:1.19.5
      - image: cimg/postgres:15.1
        environment: 
          POSTGRES_USER: circleci-demo-go
          POSTGRES_DB: circle_test
    environment: 
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved
    parallelism: 2
    steps: 
      - checkout 
      - run: mkdir -p $TEST_RESULTS # create the test results directory
      - run:
          name: Waiting for Postgres to be ready
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run unit tests
          environment: 
            CONTACTS_DB_URL: "postgres://circleci-demo-go@localhost:5432/circle_test?sslmode=disable"
            CONTACTS_DB_MIGRATIONS: /home/circleci/project/db/migrations            
          command: | 
            echo "running unit tests"
            go list ./... | circleci tests run  \
            --command='xargs gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- $(go list ./... | circleci tests split --split-by=timings --timings-type=classname)' \
            --batch-count=2 \
            --fail-fast
      - run: make
      - run:
          name: Start service
          environment:
            CONTACTS_DB_URL: "postgres://circleci-demo-go@localhost:5432/circle_test?sslmode=disable"
            CONTACTS_DB_MIGRATIONS: /home/circleci/project/db/migrations
          command: ./workdir/contacts
          background: true 
      - run:
          name: Validate service is working
          command: |
            sleep 5
            curl --retry 10 --retry-delay 1 -X POST --header "Content-Type: application/json" -d '{"email":"test@example.com","name":"Test User"}' http://localhost:8080/contacts
      - store_artifacts: # upload test summary for display in Artifacts
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results

  cloud:
    docker:
      - image: cimg/base:2023.04
    steps:
      - run: echo "hello world, here's our << pipeline.parameters.cloud_job_parameter >>"

workflows:
  build-workflow:
    jobs:
      - build
          filters:
            branches:
              only: /^dev-.*/
      - cloud

  cloud-workflow:
    when:
      and:
        - equal: [ api, << pipeline.trigger_source >> ]
        - << pipeline.parameters.cloud_workflow_parameter >>
    jobs:
      - cloud
